// a function with async before it
// ensures that the function returns a promise, and wraps non-promises in it

async function fn() {
  return 'basic async example';
}
fn().then(alert);


// await makes JavaScript wait until that promise settles and returns its result
async function fn() {

  let promise = new Promise((resolve, reject) => {
    setTimeout(() => resolve("done!"), 1000)
  });

  let result = await promise; // wait until the promise resolves (*)

  alert(result); // "done!"
}
fn();


async function showJoke() {
  const userResponse = await fetch('https://api.github.com/users/sofanisba');
  const user = await userResponse.json();
  alert(`${user.name} thinks chuck noris jokes are funny`);

  const jokeResponse = await fetch('https://api.icndb.com/jokes/random/?escape=javascript');
  const jokeObj = await jokeResponse.json();
  alert(jokeObj.value.joke);
  alert('HAHA');
}
showJoke();


// error handling
// wrap one or more lines in a try/catch
async function f() {
  try {
    let response = await fetch('http://no-such-url');
  } catch(err) {
    alert(err); // TypeError: failed to fetch
  }
}
f();

// use the promise generated by the call of the async and use .catch to handle it
async function f() {
  let response = await fetch('http://no-such-url');
}
f().catch(alert)


// When we need to wait for multiple promises, we can wrap them in Promise.all and then await
async function test() {
  let requests = await Promise.all([
    fetch('https://api.github.com/users/sofanisba'),
    fetch('https://api.github.com/users/moneil868'),
  ]);
  const users = await Promise.all(requests.map(r => r.json()))
  users.forEach((user) => alert(user.name));
}
test();